{"content":"# Testing Mermaid Diagrams in Blog Posts\n\nThis post tests the Mermaid diagram functionality in our blog. Mermaid allows us to create diagrams and flowcharts using simple text syntax.\n\n## Simple Flowchart\n\nHere's a basic flowchart showing a decision process:\n\n```mermaid\nflowchart TD\n    A[Start] --> B{Is it working?}\n    B -->|Yes| C[Great!]\n    B -->|No| D[Debug]\n    D --> E[Fix Issue]\n    E --> B\n    C --> F[End]\n```\n\n**Code for this diagram:**\n````markdown\n```mermaid\nflowchart TD\n    A[Start] --> B{Is it working?}\n    B -->|Yes| C[Great!]\n    B -->|No| D[Debug]\n    D --> E[Fix Issue]\n    E --> B\n    C --> F[End]\n```\n````\n\n## Git Workflow Diagram\n\nThis diagram shows our new branch protection workflow:\n\n```mermaid\ngitGraph\n    commit id: \"Initial\"\n    commit id: \"Feature 1\"\n\n    branch feature/new-feature\n    checkout feature/new-feature\n    commit id: \"Work in progress\"\n    commit id: \"Feature complete\"\n\n    checkout main\n    commit id: \"Hotfix\"\n\n    checkout feature/new-feature\n    merge main\n    commit id: \"Merge main\"\n\n    checkout main\n    merge feature/new-feature\n    commit id: \"Merge PR\"\n```\n\n## Sequence Diagram\n\nHere's how the fork management process works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant F as Fork\n    participant M as Main Repo\n    participant CI as GitHub Actions\n\n    U->>F: Create fork\n    U->>F: Add personal content\n    U->>F: Make improvements\n    F->>M: Create pull request\n    M->>CI: Run automated checks\n    CI->>M: Validation results\n    M->>M: Review and selective merge\n    M->>F: Provide feedback\n```\n\n**Code for this diagram:**\n````markdown\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant F as Fork\n    participant M as Main Repo\n    participant CI as GitHub Actions\n\n    U->>F: Create fork\n    U->>F: Add personal content\n    U->>F: Make improvements\n    F->>M: Create pull request\n    M->>CI: Run automated checks\n    CI->>M: Validation results\n    M->>M: Review and selective merge\n    M->>F: Provide feedback\n```\n````\n\n## Class Diagram\n\nThe architecture of our blog system:\n\n```mermaid\nclassDiagram\n    class Post {\n        +string title\n        +string date\n        +string author\n        +string excerpt\n        +string content\n        +string slug\n        +getSlug()\n        +validate()\n    }\n\n    class PostService {\n        +getAllPosts()\n        +getPostBySlug()\n        +generatePostsData()\n    }\n\n    class MermaidComponent {\n        +string chart\n        +string id\n        +render()\n    }\n\n    PostService --> Post\n    Post --> MermaidComponent : uses\n```\n\n## Pie Chart\n\nDistribution of our documentation types:\n\n```mermaid\npie title Documentation Types\n    \"Technical Docs\" : 40\n    \"User Guides\" : 30\n    \"Troubleshooting\" : 20\n    \"Examples\" : 10\n```\n\n## State Diagram\n\nThe lifecycle of a blog post:\n\n```mermaid\nstateDiagram-v2\n    [*] --> Draft\n    Draft --> Review : Submit\n    Review --> Published : Approve\n    Review --> Draft : Needs Changes\n    Published --> Archived : Archive\n    Archived --> Published : Restore\n    Published --> [*] : Delete\n```\n\n## Journey Map\n\nUser experience with our blog template:\n\n```mermaid\njourney\n    title User Journey with Blog Template\n    section Discovery\n      Find template: 5: User\n      Read documentation: 4: User\n      Fork repository: 5: User\n    section Setup\n      Configure secrets: 3: User\n      First deployment: 2: User\n      Troubleshoot issues: 1: User\n      Get help: 4: User\n    section Usage\n      Write first post: 5: User\n      Add images: 4: User\n      Customize theme: 3: User\n      Share blog: 5: User\n```\n\n## C4 Architecture Diagrams\n\n### System Context Diagram\n\nThis shows our blog template in the context of its environment:\n\n```mermaid\ngraph TB\n    User[👤 Blog Users] --> Blog[Next.js Blog Template]\n    Developer[👨‍💻 Developers] --> Blog\n\n    Blog --> Cloudflare[☁️ Cloudflare Workers]\n    Blog --> GitHub[📦 GitHub Repository]\n    Blog --> CDN[🌍 Global CDN]\n\n    subgraph \"External Systems\"\n        Cloudflare\n        GitHub\n        CDN\n    end\n\n    subgraph \"Next.js Blog Template\"\n        NextJS[Next.js 15 App]\n        MDX[MDX Content]\n        MUI[Material-UI]\n        Mermaid[Mermaid Diagrams]\n    end\n\n    style Blog fill:#e1f5fe\n    style Cloudflare fill:#fff3e0\n    style GitHub fill:#f3e5f5\n    style NextJS fill:#e8f5e8\n    style MDX fill:#fff8e1\n    style MUI fill:#fce4ec\n    style Mermaid fill:#e8eaf6\n```\n\n**Code for this diagram:**\n````markdown\n```mermaid\ngraph TB\n    User[👤 Blog Users] --> Blog[Next.js Blog Template]\n    Developer[👨‍💻 Developers] --> Blog\n\n    Blog --> Cloudflare[☁️ Cloudflare Workers]\n    Blog --> GitHub[📦 GitHub Repository]\n    Blog --> CDN[🌍 Global CDN]\n\n    subgraph \"External Systems\"\n        Cloudflare\n        GitHub\n        CDN\n    end\n\n    subgraph \"Next.js Blog Template\"\n        NextJS[Next.js 15 App]\n        MDX[MDX Content]\n        MUI[Material-UI]\n        Mermaid[Mermaid Diagrams]\n    end\n\n    style Blog fill:#e1f5fe\n    style Cloudflare fill:#fff3e0\n    style GitHub fill:#f3e5f5\n    style NextJS fill:#e8f5e8\n    style MDX fill:#fff8e1\n    style MUI fill:#fce4ec\n    style Mermaid fill:#e8eaf6\n```\n````\n\n### Container Diagram\n\nThis shows the main containers within our blog system:\n\n```mermaid\ngraph TB\n    User[👤 User] --> WebApp[🌐 Next.js Web App]\n\n    subgraph \"Blog Template System\"\n        WebApp --> StaticGen[📄 Static Site Generator]\n        WebApp --> ContentSys[📁 Content Management]\n        WebApp --> ThemeSys[🎨 Theme System]\n        WebApp --> DiagramSys[📊 Diagram Rendering]\n\n        StaticGen --> BuildProcess[🔨 Build Process]\n        ContentSys --> MDXParser[📝 MDX Parser]\n        ThemeSys --> MUIComponents[🧩 MUI Components]\n        DiagramSys --> MermaidRenderer[🎯 Mermaid Renderer]\n    end\n\n    subgraph \"Deployment Infrastructure\"\n        BuildProcess --> CloudflarePages[☁️ Cloudflare Pages]\n        CloudflarePages --> GlobalCDN[🌍 Global CDN]\n        GitHubActions[⚙️ GitHub Actions] --> BuildProcess\n    end\n\n    style WebApp fill:#e3f2fd\n    style StaticGen fill:#e8f5e8\n    style ContentSys fill:#fff3e0\n    style ThemeSys fill:#fce4ec\n    style DiagramSys fill:#e8eaf6\n    style CloudflarePages fill:#e1f5fe\n```\n\nThese diagrams should automatically adapt to both light and dark themes. The Mermaid component uses the current Material-UI theme to configure colors and styling.\n\n### Features Tested:\n- ✅ Flowcharts with decision nodes\n- ✅ Git graphs with branches and merges\n- ✅ Sequence diagrams with multiple participants\n- ✅ Class diagrams with relationships\n- ✅ Pie charts with data visualization\n- ✅ State diagrams with transitions\n- ✅ Journey maps with emotional states\n- ✅ Theme-aware rendering (light/dark mode)\n- ✅ Responsive design for mobile devices\n\n## Code Example\n\nFor comparison, here's regular code syntax highlighting:\n\n```javascript\n// Regular code block (not Mermaid)\nfunction generateMermaidId() {\n  return `mermaid-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nconsole.log('This should be syntax highlighted, not rendered as a diagram');\n```\n\nAnd here's some TypeScript:\n\n```typescript\ninterface MermaidProps {\n  chart: string;\n  id?: string;\n}\n\nconst MermaidComponent: React.FC<MermaidProps> = ({ chart, id }) => {\n  // Component implementation\n  return <div>Mermaid diagram here</div>;\n};\n```\n\n## Mermaid Resources and Documentation\n\n### Official Documentation\n- **Main Documentation**: [mermaid.js.org](https://mermaid.js.org/)\n- **Live Editor**: [mermaid.live](https://mermaid.live/) - Test your diagrams online\n- **Syntax Reference**: [Flowchart Syntax](https://mermaid.js.org/syntax/flowchart.html)\n- **All Diagram Types**: [Diagram Syntax](https://mermaid.js.org/syntax/examples.html)\n\n### Quick Reference\n- **Flowcharts**: `flowchart TD` or `graph TB`\n- **Sequence Diagrams**: `sequenceDiagram`\n- **Class Diagrams**: `classDiagram`\n- **State Diagrams**: `stateDiagram-v2`\n- **Git Graphs**: `gitGraph`\n- **Pie Charts**: `pie title \"Chart Title\"`\n- **Journey Maps**: `journey`\n\n### Tips for Better Diagrams\n1. **Test First**: Always test complex diagrams in [mermaid.live](https://mermaid.live/)\n2. **Keep It Simple**: Don't overcrowd diagrams with too many elements\n3. **Use Colors**: Add `style` commands for better visual hierarchy\n4. **Mobile Friendly**: Consider how diagrams look on small screens\n5. **Meaningful Labels**: Use descriptive text for nodes and connections\n\n## How to Use Mermaid in Your Blog Posts\n\n### Step 1: Write Your Diagram\nCreate your diagram using Mermaid syntax in a code block:\n\n````markdown\n```mermaid\nflowchart LR\n    A[Write Post] --> B[Add Diagram]\n    B --> C[Test in mermaid.live]\n    C --> D[Publish]\n```\n````\n\n### Step 2: Test Online\nBefore publishing, test your diagram at [mermaid.live](https://mermaid.live/) to ensure it renders correctly.\n\n### Step 3: Add to Your Post\nSimply paste the code block into your `.mdx` file and it will automatically render as a visual diagram.\n\n### Common Use Cases\n- **Process Flows**: Show step-by-step processes\n- **System Architecture**: Visualize component relationships\n- **User Journeys**: Map user experience flows\n- **Decision Trees**: Show decision-making processes\n- **Git Workflows**: Illustrate branching strategies\n- **Data Flows**: Show how data moves through systems\n\n## Conclusion\n\nIf you can see properly rendered diagrams above (not just code blocks), then Mermaid integration is working correctly! The diagrams should:\n\n1. **Render as visual diagrams** instead of code blocks\n2. **Adapt to the current theme** (light/dark mode)\n3. **Be responsive** and work on mobile devices\n4. **Handle errors gracefully** if there are syntax issues\n\nThis enables us to create rich, visual documentation and blog posts with flowcharts, architecture diagrams, and process flows directly in Markdown."}