{"content":"# Fixing Theme Flash (FOUC) in Next.js with Material-UI CSS Variables\n\n## The Problem: Flash of Unstyled Content\n\nWhen refreshing the page or navigating between routes, users experienced a brief **flash of white background** before the theme switched to their preferred dark mode. This is a common issue known as **Flash of Unstyled Content (FOUC)**.\n\n### Why FOUC Happens\n\nThe flash occurs because:\n\n1. **Server-Side Rendering**: During SSR, the server doesn't know the user's theme preference\n2. **localStorage Access**: Theme preferences are stored in `localStorage`, which isn't available during SSR\n3. **Hydration Mismatch**: The server renders with a default theme, then the client switches to the user's preference\n4. **Timing Issue**: There's a brief moment between initial render and theme detection\n\n## The Solution: MUI CSS Theme Variables\n\nThe most effective solution is using **MUI's CSS theme variables** approach, which prevents SSR flickering by using CSS variables instead of JavaScript-based theme switching.\n\n### 1. Theme Configuration with CSS Variables\n\nUpdate `src/lib/theme.ts` to use MUI's CSS variables:\n\n```typescript\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  cssVariables: {\n    colorSchemeSelector: 'class', // Use class-based theme switching\n  },\n  colorSchemes: {\n    light: {\n      palette: {\n        primary: {\n          main: '#1976d2',\n          light: '#42a5f5',\n          dark: '#1565c0',\n          contrastText: '#ffffff',\n        },\n        secondary: {\n          main: '#dc004e',\n          light: '#ff5983',\n          dark: '#9a0036',\n          contrastText: '#ffffff',\n        },\n        background: {\n          default: '#fafafa',\n          paper: '#ffffff',\n        },\n        text: {\n          primary: 'rgba(0, 0, 0, 0.87)',\n          secondary: 'rgba(0, 0, 0, 0.6)',\n        },\n      },\n    },\n    dark: {\n      palette: {\n        primary: {\n          main: '#90caf9',\n          light: '#e3f2fd',\n          dark: '#42a5f5',\n          contrastText: '#000000',\n        },\n        secondary: {\n          main: '#f48fb1',\n          light: '#f8bbd9',\n          dark: '#ec407a',\n          contrastText: '#000000',\n        },\n        background: {\n          default: '#121212',\n          paper: '#1e1e1e',\n        },\n        text: {\n          primary: '#ffffff',\n          secondary: 'rgba(255, 255, 255, 0.7)',\n        },\n      },\n    },\n  },\n  // ... typography and other theme options\n});\n\nexport default theme;\n```\n\n### 2. ThemeRegistry with CSS Variables Provider\n\nUpdate `src/components/ThemeRegistry.tsx` to use `Experimental_CssVarsProvider`:\n\n```typescript\n'use client';\n\nimport { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\nimport { Experimental_CssVarsProvider as CssVarsProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { useColorScheme } from '@mui/material/styles';\nimport { createContext, useContext, useEffect, ReactNode } from 'react';\nimport theme from '../lib/theme';\n\n// Theme context for managing theme state\nconst ThemeContext = createContext<{\n  mode: 'light' | 'dark';\n  toggleTheme: () => void;\n}>({\n  mode: 'light',\n  toggleTheme: () => {},\n});\n\nexport const useTheme = () => useContext(ThemeContext);\n\n// Theme provider component that manages theme state\nfunction ThemeProviderWrapper({ children }: { children: ReactNode }) {\n  const { mode, setMode } = useColorScheme();\n\n  useEffect(() => {\n    // Load theme preference from localStorage\n    const savedMode = localStorage.getItem('theme-mode') as 'light' | 'dark';\n    if (savedMode && (savedMode === 'light' || savedMode === 'dark')) {\n      setMode(savedMode);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setMode(prefersDark ? 'dark' : 'light');\n    }\n  }, [setMode]);\n\n  const toggleTheme = () => {\n    const newMode = mode === 'light' ? 'dark' : 'light';\n    setMode(newMode);\n    localStorage.setItem('theme-mode', newMode);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ mode: (mode === 'system' ? 'light' : mode) || 'light', toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport default function ThemeRegistry({ children }: { children: React.ReactNode }) {\n  return (\n    <AppRouterCacheProvider>\n      <CssVarsProvider theme={theme} defaultColorScheme=\"light\">\n        <ThemeProviderWrapper>\n          <CssBaseline />\n          {children}\n        </ThemeProviderWrapper>\n      </CssVarsProvider>\n    </AppRouterCacheProvider>\n  );\n}\n```\n\n### 3. Early Theme Detection Script\n\nAdd a script in `src/app/layout.tsx` to detect and apply the theme before any content renders:\n\n```typescript\n// src/app/layout.tsx\n<html lang=\"en\" suppressHydrationWarning>\n  <head>\n    <meta name=\"emotion-insertion-point\" content=\"\" />\n    <script\n      dangerouslySetInnerHTML={{\n        __html: `\n          (function() {\n            try {\n              var mode = localStorage.getItem('theme-mode');\n              if (!mode) {\n                var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n                mode = prefersDark ? 'dark' : 'light';\n              }\n              document.documentElement.classList.add('mui-' + mode);\n            } catch (e) {\n              document.documentElement.classList.add('mui-light');\n            }\n          })();\n        `,\n      }}\n    />\n  </head>\n  <body>\n    {/* ... rest of layout */}\n  </body>\n</html>\n```\n\n**Important**: The `suppressHydrationWarning` attribute prevents hydration errors when the script adds theme classes to the `<html>` element.\n\n### 4. Global CSS with CSS Variables\n\nCreate `src/app/globals.css` with CSS variables support:\n\n```css\n/* Global styles for MUI CSS theme variables */\n\n/* Initial theme setup - prevents flash of unstyled content */\nhtml.mui-light {\n  color-scheme: light;\n}\n\nhtml.mui-dark {\n  color-scheme: dark;\n}\n\n/* Set initial background colors to prevent flash */\nbody {\n  background-color: #fafafa; /* Light theme default */\n  transition: background-color 0.2s ease;\n}\n\nhtml.mui-dark body {\n  background-color: #121212; /* Dark theme default */\n}\n\n/* MUI CSS Variables fallbacks */\n:root {\n  --mui-palette-primary-main: #1976d2;\n  --mui-palette-background-default: #fafafa;\n  --mui-palette-background-paper: #ffffff;\n  --mui-palette-text-primary: rgba(0, 0, 0, 0.87);\n  /* ... other light theme variables */\n}\n\nhtml.mui-dark {\n  --mui-palette-primary-main: #90caf9;\n  --mui-palette-background-default: #121212;\n  --mui-palette-background-paper: #1e1e1e;\n  --mui-palette-text-primary: #ffffff;\n  /* ... other dark theme variables */\n}\n```\n\n## How This Solution Works\n\n### 1. **CSS Variables Approach**\n- MUI automatically generates CSS variables for all theme colors\n- Components use these variables instead of JavaScript theme detection\n- No more `theme.palette.mode === 'dark'` conditions needed\n\n### 2. **Early Theme Detection**\n- Script runs immediately in the `<head>` before any content renders\n- Detects user's theme preference from localStorage or system preference\n- Adds appropriate class (`mui-light` or `mui-dark`) to `<html>` element\n\n### 3. **Automatic Theme Application**\n- CSS variables are automatically applied based on the class\n- All MUI components immediately use the correct theme\n- No JavaScript delay or theme switching logic needed\n\n### 4. **Hydration Safety**\n- `suppressHydrationWarning` prevents errors when theme classes are added\n- Server and client render consistently\n- No hydration mismatches\n\n## Key Benefits\n\n### **Before (Manual Theme Checking)**\n```typescript\n// ‚ùå Old approach with manual theme checking\n<Box sx={{\n  backgroundColor: theme.palette.mode === 'dark' ? '#1e1e1e' : '#ffffff',\n  color: theme.palette.mode === 'dark' ? '#ffffff' : '#000000'\n}}>\n```\n\n### **After (CSS Variables)**\n```typescript\n// ‚úÖ New approach with CSS variables\n<Box sx={{\n  backgroundColor: 'background.paper',\n  color: 'text.primary'\n}}>\n```\n\n## Testing the Implementation\n\n### Before the Fix\n- üî¥ White flash on page refresh\n- üî¥ Theme switching delay\n- üî¥ Manual theme condition checks\n- üî¥ Inconsistent SSR/CSR rendering\n\n### After the Fix\n- ‚úÖ No flash on page refresh\n- ‚úÖ Immediate theme application\n- ‚úÖ Automatic CSS variable usage\n- ‚úÖ Consistent server and client rendering\n\n## Best Practices\n\n1. **Use Theme Tokens**: Always use MUI theme tokens like `background.paper`, `text.primary`\n2. **Avoid Manual Checks**: Don't use `theme.palette.mode === 'dark'` conditions\n3. **CSS Variables**: Let MUI handle theme switching with CSS variables\n4. **Class-Based**: Use class-based theme switching for better performance\n5. **Hydration Safety**: Add `suppressHydrationWarning` to prevent hydration errors\n\n## Resources\n\n- [MUI CSS Theme Variables Documentation](https://mui.com/material-ui/customization/css-theme-variables/configuration/)\n- [Preventing SSR Flickering](https://mui.com/material-ui/customization/css-theme-variables/configuration/#preventing-ssr-flickering)\n- [Next.js App Router Integration](https://mui.com/material-ui/integrations/nextjs/)\n\n## Conclusion\n\nBy implementing MUI's CSS theme variables approach, we've completely eliminated the FOUC issue while simplifying the codebase. The solution provides:\n\n- **Zero flickering** on page refresh and navigation\n- **Better performance** with native CSS variables\n- **Simplified code** without manual theme checks\n- **Consistent rendering** between server and client\n\nThe key insight is that **CSS variables provide immediate theme application** without requiring JavaScript execution, making them the ideal solution for preventing SSR flickering in Next.js applications with Material-UI."}