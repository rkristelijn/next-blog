{"content":"# Adding MDX Functionality to Your Next.js Blog\n\nIn this third post of our series, I'll show you how to add MDX (Markdown + JSX) functionality to your Next.js blog. MDX allows you to use React components within your markdown content, making your blog posts more dynamic and interactive.\n\n## What is MDX?\n\nMDX is a format that lets you write JSX in your markdown documents. This means you can:\n- Use React components in your blog posts\n- Create interactive content\n- Maintain the simplicity of markdown while adding React's power\n- Build custom components for your content\n\n## Step 1: Install MDX Dependencies\n\nAdd the necessary MDX packages to your project:\n\n```bash\nnpm install @next/mdx @mdx-js/loader @mdx-js/react gray-matter\n```\n\n**Package explanations:**\n- `@next/mdx`: Next.js MDX integration\n- `@mdx-js/loader`: Webpack loader for MDX files\n- `@mdx-js/react`: React components for MDX\n- `gray-matter`: Parse frontmatter from markdown files\n\n## Step 2: Configure Next.js for MDX\n\nUpdate your `next.config.ts` to include MDX support:\n\n```typescript\nimport type { NextConfig } from \"next\";\nimport createMDX from '@next/mdx';\n\nconst withMDX = createMDX({\n  options: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n});\n\nconst nextConfig: NextConfig = {\n  output: \"export\",\n  trailingSlash: true,\n  images: {\n    unoptimized: true\n  },\n  pageExtensions: ['js', 'jsx', 'mdx', 'ts', 'tsx'],\n};\n\nexport default withMDX(nextConfig);\n```\n\n## Step 3: Create Content Structure\n\nOrganize your blog content in a dedicated directory:\n\n```bash\nmkdir -p src/content/posts\n```\n\nThis structure keeps your content separate from your application code.\n\n## Step 4: Define Content Types\n\nCreate TypeScript interfaces for your blog posts in `src/types/index.ts`:\n\n```typescript\n// See src/types/index.ts for the actual Post interface\nexport interface Post {\n  id: string;\n  title: string;\n  excerpt: string;\n  date: string;\n  author: string;  // Added in later updates\n  slug: string;\n  content: string;\n}\n\nexport interface PostPageProps {\n  params: Promise<{ slug: string }>;\n}\n```\n\n## Step 5: Create the Data Layer\n\nBuild `src/lib/posts.ts` to handle content operations:\n\n```typescript\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport type { Post } from '@/types';\n\nconst POSTS_DIRECTORY = path.join(process.cwd(), 'src/content/posts');\n\nexport function getAllPosts(): Post[] {\n  try {\n    const fileNames = fs.readdirSync(POSTS_DIRECTORY);\n    const mdxFiles = fileNames.filter(fileName => fileName.endsWith('.mdx'));\n\n    const posts = mdxFiles.map(fileName => {\n      const slug = fileName.replace(/\\.mdx$/, '');\n      return getPostBySlug(slug);\n    }).filter((post): post is Post => post !== undefined);\n\n    return posts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  } catch (error) {\n    console.error('Error reading posts directory:', error);\n    return [];\n  }\n}\n\nexport function getPostBySlug(slug: string): Post | undefined {\n  try {\n    const fullPath = path.join(POSTS_DIRECTORY, `${slug}.mdx`);\n\n    if (!fs.existsSync(fullPath)) {\n      return undefined;\n    }\n\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const { data, content } = matter(fileContents);\n\n    if (!data.title || !data.date || !data.excerpt) {\n      console.warn(`Missing required frontmatter fields in ${slug}.mdx`);\n      return undefined;\n    }\n\n    return {\n      id: slug,\n      slug,\n      title: data.title,\n      date: data.date,\n      excerpt: data.excerpt,\n      content\n    };\n  } catch (error) {\n    console.error(`Error reading post ${slug}:`, error);\n    return undefined;\n  }\n}\n\nexport function getAllPostSlugs(): string[] {\n  try {\n    const fileNames = fs.readdirSync(POSTS_DIRECTORY);\n    return fileNames\n      .filter(fileName => fileName.endsWith('.mdx'))\n      .map(fileName => fileName.replace(/\\.mdx$/, ''));\n  } catch (error) {\n    console.error('Error reading posts directory:', error);\n    return [];\n  }\n}\n```\n\n## Step 6: Create Your First MDX Post\n\nCreate `src/content/posts/hello-world.mdx`:\n\n```markdown\n---\ntitle: \"Hello World\"\ndate: \"2024-01-15\"\nexcerpt: \"Welcome to my first blog post!\"\n---\n\n# Hello World\n\nWelcome to my first blog post! This is written in MDX, which means I can use **markdown** syntax and even React components.\n\n## Features\n\n- ✅ Markdown support\n- ✅ React components\n- ✅ Frontmatter metadata\n- ✅ TypeScript integration\n\n## Code Example\n\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n```\n\n## What's Next?\n\nIn future posts, we'll explore how to add custom React components to make our content even more interactive.\n```\n\n## Step 7: Create Blog Listing Page\n\nUpdate `src/app/posts/page.tsx` to display all posts:\n\n```typescript\nimport { Container, Typography, Box } from '@mui/material';\nimport Navigation from '@/components/Navigation';\nimport PostCard from '@/components/PostCard';\nimport { getAllPosts } from '@/lib/posts';\n\nexport default function PostsPage() {\n  const posts = getAllPosts();\n\n  return (\n    <Box sx={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <Navigation title=\"Blog Posts\" showHome={true} showBack={false} />\n\n      <Container maxWidth=\"md\" sx={{ flex: 1, py: 4 }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom sx={{ mb: 4 }}>\n          Blog Posts\n        </Typography>\n\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n          {posts.map((post) => (\n            <PostCard key={post.id} post={post} />\n          ))}\n        </Box>\n      </Container>\n    </Box>\n  );\n}\n```\n\n## Step 8: Create Individual Post Pages\n\nCreate `src/app/posts/[slug]/page.tsx` for dynamic post routes:\n\n```typescript\nimport { notFound } from 'next/navigation';\nimport { Container, Box } from '@mui/material';\nimport Navigation from '@/components/Navigation';\nimport PostContent from '@/components/PostContent';\nimport { getPostBySlug } from '@/lib/posts';\nimport type { PostPageProps } from '@/types';\n\nexport default async function PostPage({ params }: PostPageProps) {\n  const { slug } = await params;\n  const post = getPostBySlug(slug);\n\n  if (!post) {\n    notFound();\n  }\n\n  return (\n    <Box sx={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <Navigation title={post.title} showHome={true} showBack={true} />\n\n      <Container maxWidth=\"md\" sx={{ flex: 1, py: 4 }}>\n        <PostContent post={post} />\n      </Container>\n    </Box>\n  );\n}\n```\n\n## Step 9: Create Supporting Components\n\n### PostCard Component\n\nCreate `src/components/PostCard.tsx`:\n\n```typescript\nimport Link from 'next/link';\nimport { Card, CardContent, Typography, Box } from '@mui/material';\nimport type { PostCardProps } from '@/types';\n\nexport default function PostCard({ post }: PostCardProps) {\n  return (\n    <Card component={Link} href={`/posts/${post.slug}`} sx={{ textDecoration: 'none' }}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          {post.title}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n          {new Date(post.date).toLocaleDateString()}\n        </Typography>\n        <Typography variant=\"body1\">\n          {post.excerpt}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n### PostContent Component\n\nCreate `src/components/PostContent.tsx`:\n\n```typescript\nimport { Typography, Box } from '@mui/material';\nimport ReactMarkdown from 'react-markdown';\nimport type { PostContentProps } from '@/types';\n\nexport default function PostContent({ post }: PostContentProps) {\n  return (\n    <Box>\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n        {post.title}\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n        {new Date(post.date).toLocaleDateString()}\n      </Typography>\n      <Box sx={{ mt: 4 }}>\n        <ReactMarkdown>{post.content}</ReactMarkdown>\n      </Box>\n    </Box>\n  );\n}\n```\n\n## Step 10: Test Your MDX Setup\n\n1. Start your development server:\n   ```bash\n   npm run dev\n   ```\n\n2. Visit `http://localhost:3000/posts` to see your blog listing\n3. Click on a post to view the individual post page\n\n## MDX Frontmatter Structure\n\nAll your MDX files should follow this frontmatter structure:\n\n```markdown\n---\ntitle: \"Your Post Title\"\ndate: \"YYYY-MM-DD\"\nexcerpt: \"Brief description of your post\"\n---\n```\n\n## Benefits of MDX\n\n1. **Enhanced Content**: Use React components in your markdown\n2. **Interactive Elements**: Add charts, forms, or custom widgets\n3. **Consistent Styling**: Apply your design system to content\n4. **Type Safety**: Full TypeScript support\n5. **Developer Experience**: Familiar markdown syntax with React power\n\n## What's Next?\n\nIn the next post, we'll integrate Material-UI to replace the basic HTML with beautiful, consistent UI components. This will give your blog a professional, modern appearance.\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Build Errors**: Ensure all MDX dependencies are installed\n2. **TypeScript Errors**: Check that your type definitions are correct\n3. **Missing Posts**: Verify your MDX files have proper frontmatter\n4. **Styling Issues**: Make sure your components are properly styled\n\n## Resources\n\n- [MDX Documentation](https://mdxjs.com/)\n- [Next.js MDX Guide](https://nextjs.org/docs/app/guides/mdx)\n- [Gray Matter Documentation](https://github.com/jonschlinkert/gray-matter)\n\n---\n\nYour Next.js blog now supports MDX! You can create rich, interactive content using markdown and React components. In the next post, we'll enhance the visual design with Material-UI."}