{"content":"# From OpenNext Workers to Cloudflare Pages: When Bundle Size Forces Architecture Decisions\n\nSometimes the best architectural decisions are forced upon you by constraints. Today I experienced exactly that when our Next.js blog deployment failed due to Cloudflare Workers' 3MB bundle size limit.\n\n## The Problem: Bundle Size Explosion\n\nOur blog was using `@opennextjs/cloudflare` to deploy a full Next.js application to Cloudflare Workers. Everything worked fine until we hit this error:\n\n```bash\n▲ [WARNING] Here are the 5 largest dependencies included in your script:\n  - .open-next/server-functions/default/handler.mjs - 14572.76 KiB\n  - .open-next/middleware/handler.mjs - 104.43 KiB\n  - .open-next/.build/durable-objects/queue.js - 12.16 KiB\n\n✘ [ERROR] Your Worker exceeded the size limit of 3 MiB.\n  Please upgrade to a paid plan to deploy Workers up to 10 MiB.\n```\n\n**14.5MB** for a simple blog? That's when you know something went wrong.\n\n## The Root Cause\n\nThe issue wasn't with our content optimization (we already had a 95.2% bundle size reduction system in place). The problem was that `opennextjs-cloudflare` bundles the entire Next.js runtime, React, Material-UI, and all dependencies into a single Worker script.\n\nFor a blog with 23 posts, this created a massive bundle that included:\n- Full Next.js server runtime\n- Complete React SSR capabilities\n- Material-UI component library\n- All our optimized content (even though split)\n- Various polyfills and Node.js compatibility layers\n\n## The Solution: Back to Basics\n\nInstead of fighting the bundle size, we switched to a fundamentally different approach:\n\n### Before (OpenNext Workers):\n```bash\n# Complex build process\nopennextjs-cloudflare build    # Creates 14.5MB Worker bundle\nopennextjs-cloudflare deploy   # Deploys to Workers\n\n# Result: Dynamic SSR app with 3MB limit\n```\n\n### After (Cloudflare Pages):\n```bash\n# Simple build process\nnext build                     # Static export\nwrangler pages deploy out      # Deploy static files\n\n# Result: Static site with no limits\n```\n\n## Configuration Changes\n\nThe migration was surprisingly simple:\n\n**package.json updates:**\n```json\n{\n  \"scripts\": {\n    \"deploy\": \"npm run build && npx wrangler pages deploy out --project-name=next-blog-demo\",\n    \"preview\": \"npm run build && npx wrangler pages dev out --port=3001\"\n  }\n}\n```\n\n**wrangler.jsonc for Pages:**\n```json\n{\n  \"name\": \"next-blog-demo\",\n  \"pages_build_output_dir\": \"out\",\n  \"compatibility_date\": \"2025-03-01\"\n}\n```\n\n**next.config.ts (already had this):**\n```typescript\nconst nextConfig: NextConfig = {\n  output: \"export\",        // Static export\n  trailingSlash: true,\n  images: {\n    unoptimized: true\n  },\n};\n```\n\n## What We Lost vs. What We Gained\n\n### Lost:\n- **Server-side rendering** - Everything is now pre-built\n- **API routes** - No `/api/*` endpoints\n- **Dynamic imports** - All content is static\n- **Real-time features** - No server-side logic\n\n### Gained:\n- **No size limits** - Can scale to hundreds of posts\n- **Better performance** - Static files served from CDN\n- **Simpler deployment** - No Worker complexity\n- **Lower costs** - Pages is free for static sites\n- **Higher reliability** - No Worker resource limits\n\n## Performance Comparison\n\n| Metric | OpenNext Workers | Cloudflare Pages |\n|--------|------------------|------------------|\n| **Bundle Size** | 14.5MB (failed) | 149 files, ~3MB total |\n| **Cold Start** | ~100-500ms | 0ms (static) |\n| **TTFB** | Variable | <50ms (CDN) |\n| **Scalability** | Limited by Worker | Unlimited |\n| **Cost** | Worker requests | Free |\n\n## The Irony\n\nThe ironic part? Our blog was already optimized for static deployment:\n\n- **Content splitting**: Metadata vs. full content\n- **On-demand loading**: Only load what's needed\n- **95.2% size reduction**: From 240KB to 11.6KB metadata\n\nAll this optimization was designed for Workers, but it works even better with static deployment!\n\n## When to Use Each Approach\n\n### Use OpenNext Workers when you need:\n- Server-side rendering\n- API routes\n- Real-time data\n- User authentication\n- Dynamic content per request\n\n### Use Cloudflare Pages when you have:\n- Static or mostly static content\n- Content-driven sites (blogs, docs)\n- Performance as top priority\n- Simple deployment requirements\n\n## Lessons Learned\n\n1. **Constraints drive innovation** - The 3MB limit forced us to find a better solution\n2. **Simpler is often better** - Static deployment is faster and more reliable\n3. **Know your use case** - A blog doesn't need server-side complexity\n4. **Bundle analysis matters** - Always check what you're actually deploying\n\n## The Result\n\nOur blog is now live at: **https://next-blog-demo-mu6.pages.dev/**\n\n- ✅ Faster loading times\n- ✅ No size constraints\n- ✅ Simpler deployment pipeline\n- ✅ Better reliability\n- ✅ Lower complexity\n\nSometimes the best architectural decision is the one that removes complexity rather than adding it.\n\n## Next Steps\n\nWhile this solution works perfectly for our blog, we're considering:\n\n1. **Hybrid approach** - Pages for content, Workers for APIs\n2. **Custom domain** - Moving from the demo URL\n3. **GitHub Actions integration** - Automated deployments\n4. **Performance monitoring** - Measuring the improvements\n\nThe moral of the story? When you hit a wall, sometimes the best path forward is to step back and choose a different route entirely.\n\n---\n\n*Have you faced similar bundle size issues? How did you solve them? Share your experiences in the comments below!*"}