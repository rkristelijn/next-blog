{"content":"# Automated Deployment with GitHub Actions and Cloudflare Pages\n\nIn this second post of our series, I'll show you how to set up automated deployment using GitHub Actions and Cloudflare Pages. This will enable continuous deployment whenever you push changes to your repository.\n\n## Why Automated Deployment?\n\nAutomated deployment eliminates manual deployment steps, reduces human error, and ensures your blog is always up-to-date with your latest changes. With GitHub Actions, every push to your main branch will automatically trigger a build and deployment.\n\n## Prerequisites\n\nBefore setting up automated deployment, you'll need:\n\n1. A GitHub repository with your Next.js project\n2. A Cloudflare account\n3. Your project already configured with OpenNext (from the previous post)\n\n## Step 1: Set Up Cloudflare Pages\n\n### Create a Cloudflare Pages Project\n\n1. Log into your Cloudflare dashboard\n2. Navigate to **Pages** in the sidebar\n3. Click **Create a project**\n4. Choose **Connect to Git**\n5. Select your GitHub repository\n6. Configure the build settings:\n   - **Framework preset**: None\n   - **Build command**: `npm run ci:build`\n   - **Build output directory**: `out`\n   - **Root directory**: `/` (leave empty)\n\n### Get Cloudflare Credentials\n\nYou'll need two pieces of information from Cloudflare:\n\n1. **Account ID**: Found in your Cloudflare dashboard sidebar\n2. **API Token**: Create a custom token with Pages deployment permissions\n\n## Step 2: Create GitHub Secrets\n\nIn your GitHub repository:\n\n1. Go to **Settings** → **Secrets and variables** → **Actions**\n2. Add the following secrets:\n   - `CLOUDFLARE_ACCOUNT_ID`: Your Cloudflare account ID\n   - `CLOUDFLARE_API_TOKEN`: Your Cloudflare API token\n\n## Step 3: Create GitHub Actions Workflow\n\nCreate `.github/workflows/deploy.yml`:\n\n```yaml\nname: Deploy to Cloudflare Pages\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Build application\n        run: npm run build\n\n      - name: Deploy to Cloudflare Pages\n        uses: cloudflare/pages-action@v1\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          projectName: next-blog\n          directory: out\n          gitHubToken: ${{ secrets.GITHUB_TOKEN }}\n```\n\n## Step 4: Configure Build Output\n\nEnsure your `next.config.ts` is configured for static export:\n\n```typescript\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  output: \"export\",\n  trailingSlash: true,\n  images: {\n    unoptimized: true\n  }\n};\n\nexport default nextConfig;\n```\n\n## Step 5: Test the Deployment\n\n1. Commit and push your changes to the main branch\n2. Go to your GitHub repository's **Actions** tab\n3. You should see the deployment workflow running\n4. Check the Cloudflare Pages dashboard for deployment status\n\n## Step 6: Configure Custom Domain (Optional)\n\nIn your Cloudflare Pages dashboard:\n\n1. Go to your project settings\n2. Navigate to **Custom domains**\n3. Add your custom domain\n4. Update your DNS settings as instructed\n\n## Understanding the Workflow\n\n### Trigger Conditions\n- **Push to main**: Deploys production changes\n- **Pull requests**: Tests builds without deploying\n\n### Build Process\n1. **Checkout**: Gets the latest code\n2. **Node.js Setup**: Installs Node.js 18\n3. **Dependencies**: Installs npm packages\n4. **Build**: Creates production build\n5. **Deploy**: Uploads to Cloudflare Pages\n\n### Environment Variables\n- `CLOUDFLARE_API_TOKEN`: Authenticates with Cloudflare\n- `CLOUDFLARE_ACCOUNT_ID`: Identifies your account\n- `GITHUB_TOKEN`: Provided automatically by GitHub\n\n## Monitoring Deployments\n\n### GitHub Actions\n- View deployment status in the **Actions** tab\n- Check build logs for any errors\n- Monitor deployment times\n\n### Cloudflare Pages\n- View deployment history in the Pages dashboard\n- Check for any build errors\n. Monitor performance metrics\n\n## Troubleshooting Common Issues\n\n### Build Failures\n1. **Dependency Issues**: Check `package-lock.json` is committed\n2. **TypeScript Errors**: Fix type errors before pushing\n3. **Memory Issues**: Consider using `npm ci` instead of `npm install`\n\n### Deployment Failures\n1. **API Token Issues**: Verify token has correct permissions\n2. **Account ID**: Double-check the account ID format\n3. **Project Name**: Ensure project name matches Cloudflare Pages\n\n### Performance Issues\n1. **Build Time**: Optimize dependencies and build process\n2. **Bundle Size**: Monitor and optimize your JavaScript bundles\n3. **Image Optimization**: Use Next.js Image component appropriately\n\n## Advanced Configuration\n\n### Environment-Specific Builds\n\nYou can create different workflows for different environments:\n\n```yaml\nname: Deploy to Staging\non:\n  push:\n    branches: [develop]\n\njobs:\n  deploy-staging:\n    runs-on: ubuntu-latest\n    steps:\n      # Similar steps but deploy to staging environment\n```\n\n### Conditional Deployments\n\nOnly deploy on specific file changes:\n\n```yaml\non:\n  push:\n    branches: [main]\n    paths:\n      - 'src/**'\n      - 'package.json'\n      - 'next.config.ts'\n```\n\n## Benefits of This Setup\n\n1. **Automated**: No manual deployment steps required\n2. **Reliable**: Consistent deployment process\n3. **Fast**: Cloudflare's global CDN ensures fast loading\n4. **Secure**: HTTPS enabled by default\n5. **Scalable**: Handles traffic spikes automatically\n\n## What's Next?\n\nIn the next post, we'll add MDX functionality to enable enhanced content creation with React components in markdown. This will make your blog more interactive and powerful.\n\n## Resources\n\n- [GitHub Actions Documentation](https://docs.github.com/en/actions)\n- [Cloudflare Pages Documentation](https://developers.cloudflare.com/pages/)\n- [OpenNext Documentation](https://opennext.js.org/)\n\n---\n\nYour Next.js blog now has automated deployment! Every push to your main branch will automatically deploy to Cloudflare Pages. In the next post, we'll enhance the content creation experience with MDX."}