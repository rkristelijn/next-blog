name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate posts data
        run: node scripts/generate-posts-data.js

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run

      - name: Run diagnostics
        run: npm run diagnose

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate posts data
        run: |
          echo "🔄 Regenerating posts.json with latest content..."
          node scripts/generate-posts-data.js
          echo "✅ Posts data regenerated successfully!"

      - name: Build project
        run: npm run ci:build

      - name: Check if Cloudflare Worker exists
        id: check-worker
        run: |
          # Check if the worker exists by trying a dry-run deployment
          if npx wrangler deploy --dry-run 2>&1 | grep -q "No deployments found\|Worker not found"; then
            echo "worker_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Cloudflare Worker 'next-blog' does not exist, will create it on first deployment"
          else
            echo "worker_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Cloudflare Worker 'next-blog' already exists"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers
        run: |
          echo "🚀 Deploying to Cloudflare Workers..."
          # Deploy with automatic workers.dev subdomain registration
          npx wrangler deploy --compatibility-date 2025-03-01
          echo "✅ Deployment completed successfully!"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }} 