name: Branch Protection Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  validate-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run diagnostics
        run: npm run diagnose

      - name: Validate posts data generation
        run: |
          echo "üîÑ Testing posts data generation..."
          node scripts/generate-posts-data.js
          echo "‚úÖ Posts data generation successful!"

      - name: Run linting
        run: npm run lint

      - name: Test build process
        run: npm run ci:build

      - name: Check for required files
        run: |
          echo "üîç Checking required files..."
          test -f "src/data/posts.json" || (echo "‚ùå posts.json not generated" && exit 1)
          test -f ".github/workflows/deploy.yml" || (echo "‚ùå deploy.yml missing" && exit 1)
          test -f "wrangler.jsonc" || (echo "‚ùå wrangler.jsonc missing" && exit 1)
          echo "‚úÖ All required files present"

  check-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation consistency
        run: |
          echo "üìö Checking documentation..."
          
          # Check if new posts have proper frontmatter
          for file in src/content/posts/*.mdx; do
            if ! grep -q "^title:" "$file"; then
              echo "‚ùå Missing title in $file"
              exit 1
            fi
            if ! grep -q "^date:" "$file"; then
              echo "‚ùå Missing date in $file"
              exit 1
            fi
            if ! grep -q "^excerpt:" "$file"; then
              echo "‚ùå Missing excerpt in $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All posts have required frontmatter"

  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for sensitive data
        run: |
          echo "üîí Checking for sensitive data..."
          
          # Check for potential secrets in source code (excluding content and generated data files)
          # We exclude:
          # - src/content: Original MDX blog posts (may contain documentation examples)
          # - src/data: Generated JSON files from blog posts (contain same documentation)
          if grep -r "CLOUDFLARE_API_TOKEN.*=" src/ --exclude-dir=content --exclude-dir=data --exclude="*.json" | grep -v 'secrets\.' | grep -v 'apiToken:' | grep -v 'CLOUDFLARE_API_TOKEN.*:'; then
            echo "‚ùå Potential API token found in source code"
            exit 1
          fi
          
          # Check for hardcoded secrets in source code only (excluding documentation)
          if grep -r "sk-" src/ --exclude-dir=content --exclude-dir=data --exclude="*.json" | grep -v 'example\|documentation\|tutorial'; then
            echo "‚ùå Potential hardcoded secret found"
            exit 1
          fi
          
          if grep -r "pk_" src/ --exclude-dir=content --exclude-dir=data --exclude="*.json" | grep -v 'example\|documentation\|tutorial'; then
            echo "‚ùå Potential hardcoded secret found"
            exit 1
          fi
          
          echo "‚úÖ No sensitive data detected"
